#! /usr/bin/env python

# Generates unique list of PDB ids for given set of PDB ids

import sys,os
import getopt
from utils import debug,warning,error,fatal_error,setdebuglevel
from utils import sort,uniq

OUTPUT_MODES = ['single','double']
DEFAULT_VERBOSITY = 0
DEFAULT_OUTPUT_MODE = 'double'
DEFAULT_UNIQFILENAME = '/project1/structure/mliang/pdb/derived_data/NR/clusters90.txt'

def eusage():
    print "Usage: %s [OPTIONS] PDBIDs..." % os.path.basename(sys.argv[0])
    print """
Options:
    -v  Increase verbosity {%(DEFAULT_VERBOSITY)s}
    -f FILENAME
        Read PDBIDs from FILENAME
    -m MODE
        Select output mode {%(DEFAULT_OUTPUT_MODE)s}
        %(OUTPUT_MODES)s
    -u UNIQFILENAME
        PDB NR cluster file {%(DEFAULT_UNIQFILENAME)s}
    -p THRESHOLD
        Select UNIQFILE according to threshold and default path
""" % globals()
    sys.exit(1)


def uniq(l):
    return dict([(v,1) for v in l]).keys()
    

class UniqEntry:
    def __init__(self,line=None):
        if line:
            self.ParseLine(line)

    def ParseLine(self, line):
        fields = line.split('\t',2)
        self.cluster = int(fields[0])
        self.rank = int(fields[1])
        self.id = fields[2].strip()

        self.pdbid = self.id.split(':')[0]

    def __cmp__(self,other):
        return cmp((self.cluster,self.rank,self.pdbid),(other.cluster,other.rank,other.pdbid))

    def __str__(self):
        return str([self.cluster,self.rank,self.id])

class UniqFile:
    def __init__(self, filename):
        self.byCluster = {}
        self.byPdbid = {}
        self.Read(filename)

    def Read(self,filename):
        self.filename = filename
        for line in file(filename):
            entry = UniqEntry(line)
            self.byCluster.setdefault(entry.cluster,[]).append(entry)
            self.byPdbid.setdefault(entry.pdbid,[]).append(entry)

    def GetRepresentative(self,pdbid):
        pdbid = pdbid.upper()
        # lookup all entries containing pdbid
        entries = self.byPdbid.get(pdbid,[])
        debug(2,"Number of pdbid entries (%s)" % pdbid,len(entries))
        debug(2,"Matches:",map(str,entries))
        # lookup all clusters of the entries
        clusters = [self.byCluster.get(e.cluster,[]) for e in entries]
        debug(2,"Number of clusters (%s)" % pdbid,len(clusters))
        # pick the representative of each cluster
        representatives = [min(c) for c in clusters]
        debug(2,"Number of representatives (%s)" % pdbid,len(representatives))
        return representatives

verbosity = DEFAULT_VERBOSITY
output_mode = DEFAULT_OUTPUT_MODE
uniqfilename = DEFAULT_UNIQFILENAME
pdbids = []
args = sys.argv[1:]
try:
    optlist,args = getopt.getopt(args,"vm:f:u:p:")
except getopt.GetoptError:
    eusage()
for opt,arg in optlist:
    if opt in ('-v',):
        verbosity += 1
    elif opt in ('-m',):
        if arg not in OUTPUT_MODES:
            fatal_error('Invalid mode',arg)
        output_mode = arg
    elif opt in ('-f',):
        if arg == '-':
            pdbids.extend([l.strip() for l in sys.stdin])
        else:
            if not os.path.exists(arg):
                fatal_error('Could not open file',arg)
            pdbids.extend([l.strip() for l in file(arg)])
    elif opt in ('-u',):
        if not os.path.exists(arg):
            fatal_error('Could not open cluster file',arg)
        uniqfilename = arg
    elif opt in ('-p',):
        tmpfile = os.path.join(os.path.split(uniqfilename)[0],'clusters%s.txt' % arg)
        if not os.path.exists(tmpfile):
            fatal_error('Could not open cluster file',tmpfile)
        uniqfilename = tmpfile
setdebuglevel(verbosity)
try:
    pdbids.extend(args)
except IndexError:
    eusage()

if not os.path.exists(uniqfilename):
    fatal_error('Could not open cluster file',uniqfilename)

uniqfile = UniqFile(uniqfilename)
debug(1,"Number input pdbids:",len(pdbids))
debug(1,"Number of pdbids:",len(uniqfile.byPdbid))
debug(1,"Number of clusters:",len(uniqfile.byCluster))

if output_mode == 'single':
    # Mode 1
    rep_pdbids = []
    for pdbid in pdbids:
        entries = uniqfile.byPdbid.get(pdbid.upper(),[])
        if not entries:
            rep_pdbids.append(pdbid)
        else:
            for entry in entries:
                rep_entry = min(uniqfile.byCluster[entry.cluster])
                rep_pdbids.append(rep_entry.pdbid)
    for r in sort(uniq(rep_pdbids)):
        print r
elif output_mode == 'double':
    # Mode 2
    for pdbid in pdbids:
        entries = uniqfile.byPdbid.get(pdbid.upper(),[])
        if not entries:
            print "*%s\t%s" % (pdbid,pdbid)
        else:
            for entry in entries:
                rep_entry = min(uniqfile.byCluster[entry.cluster])
                print "%s\t%s" % (entry.id, rep_entry.id)
