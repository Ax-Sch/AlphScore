data=xtrain_dataset,
importance="impurity",
splitrule="extratrees",
max.depth=opt$max_depth_param,
num.trees = opt$num_trees_param,
min.node.size = opt$min_node_param
)
return(model1)
}
xgboost_fit<-function(xtrain_dataset){
library(xgboost)
set.seed(1)
n_ds<-nrow(xtrain_dataset)
train_i<-sample(1:n_ds,as.integer(n_ds*0.8))
train_ds<-xgb.DMatrix(data=as.matrix(xtrain_dataset[train_i,] %>% dplyr::select(-outcome)), label=xtrain_dataset$outcome[train_i] )
test_ds<-xgb.DMatrix(data=as.matrix(xtrain_dataset[-train_i,] %>% dplyr::select(-outcome)), label=xtrain_dataset$outcome[-train_i] )
watchlist=list(train=train_ds, test=test_ds)
params <- list(max_depth = opt$max_depth_param,
subsample=opt$subsample_param,
eta=opt$eta_param,
lambda=opt$lambda_param,
alpha=0,
gamma=opt$gamma_param,
min_child_weight=opt$min_child_weight_param)
model1<-xgb.train(
data=train_ds,
watchlist = watchlist,
params=params,
nrounds = opt$num_trees_param,
early_stopping_rounds = 10,
#eval_metric="auc",
objective = "binary:logistic",  # for regression models
verbose = 1)
return(model1)
}
xgboost_predict<-function(dataset, modelx){
data_x<-xgb.DMatrix(data=as.matrix(dataset %>% dplyr::select(-outcome)))
return(
predict(modelx, data_x)
)
}
if (opt$method_pred=="xgboost"){
fit_model<-xgboost_fit
predict_model<-xgboost_predict
} else if (opt$method_pred=="randomforest") {
fit_model<-ranger_fit
predict_model<-ranger_predict
}else {
fit_model<-extraT_fit
predict_model<-ranger_predict
}
if (opt$k_fold_cross_val == TRUE){
set.seed(1)
genes<-unique(variants$gene)
genes<-as_tibble(genes)
genes$index<-as.integer(runif(nrow(genes),1,6))
glm_cv<-data.frame()
cc<-complete.cases(variants[, c(colnames_new, "outcome")])
variants_filtered<-variants[cc, ]
for (h in unique(genes$index)) {
non_h_gnomad_train<-variants_filtered %>% filter(!gene %in% genes[genes$index==h,]$value) %>% #non_h = every gene with index = non-h (if h=1 then non_h=2,3,4,5 etc.); gnomadSet= 1 --> gnomad as training set
filter(gnomadSet==1)
non_h_cv_test <- variants_filtered %>% filter(!gene %in% genes[genes$index==h,]$value) %>% #non_h = every gene with index = non-h (if h=1 then 2,3,4,5 etc.); gnomadSet= 0 --> cv (ClinVar) as test set
filter(gnomadSet == 0,
!var_id_genomic %in% non_h_gnomad_train$var_id_genomic)%>%
filter(!var_id_prot %in% non_h_gnomad_train$var_id_prot,
!var_id_genomic %in% non_h_gnomad_train$var_id_genomic)
h_cv_test<-variants_filtered %>% filter(gene %in% genes[genes$index==h,]$value) %>% #h = every gene with index = current h (if h=1 then 1); gnomadSet= 0 --> cv as test set
filter(gnomadSet == 0)%>%
filter(!var_id_prot %in% non_h_gnomad_train$var_id_prot,
!var_id_genomic %in% non_h_gnomad_train$var_id_genomic,
!var_id_prot %in% non_h_cv_test$var_id_prot,
!var_id_genomic %in% non_h_cv_test$var_id_genomic)
gnomad_model_Alph<-fit_model(non_h_gnomad_train %>% dplyr::select(all_of(colnames_new)))
non_h_cv_test$predicted_Alph<-predict_model(non_h_cv_test %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph) #prediction with model = non_h_gnomad_Alph and test = non_h_cv_test: predicted_non_h_gnomad_Alph_non_h_cv_test
non_h_gnomad_train$predicted_Alph<-predict_model(non_h_gnomad_train %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph)
non_h_cv_model_glm<- glm(outcome ~ . , family=binomial(link='logit'), #glm model with non_h_cv, inclusion of CADD score; predicted_non_h_gnomad_Alph_non_h_cv_test
data=non_h_cv_test %>% dplyr::select(outcome, predicted_Alph, CADD_raw) %>%
filter(complete.cases(.)))
h_cv_test$predicted_Alph <- predict_model(h_cv_test %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph) #prediction with model = non_h_gnomad_Alph and test = h_cv_test: predicted_non_h_gnomad_Alph_h_cv_test
h_cv_test$predicted_glm <-predict(non_h_cv_model_glm, h_cv_test)#prediction with model = non_h_cv_model_glm, test = : predicted__non_h_cv_glm_h_cv_test
save_tibble <- rbind(save_tibble,
tibble(auc_Alph_non_h_gnomAD=roc(non_h_gnomad_train$outcome, non_h_gnomad_train$predicted_Alph)$auc,
Alph_OOB=ifelse((opt$method_pred=="randomforest"), gnomad_model_Alph$prediction.error, NA),
auc_CADD_non_h_CV=roc(non_h_cv_test$outcome, non_h_cv_test$CADD_raw)$auc,
auc_Alph_non_h_CV=roc(non_h_cv_test$outcome, non_h_cv_test$predicted_Alph)$auc,
auc_CADD_h_CV=roc(h_cv_test$outcome, h_cv_test$CADD_raw)$auc,
auc_Alph_h_CV=roc(h_cv_test$outcome, h_cv_test$predicted_Alph)$auc,
auc_glm_h_CV=roc(h_cv_test$outcome, h_cv_test$predicted_glm)$auc,
sample_num=h,
non_h_gnomad_train_nrow=nrow(non_h_gnomad_train),
non_h_cv_test_nrow=nrow(non_h_cv_test),
h_cv_test_nrow=nrow(h_cv_test),
condition=opt$prefix,
params=I(list(opt))))
plot_auc_CADD_non_h <- plot(roc(non_h_cv_test$outcome, non_h_cv_test$CADD_raw), print.auc = TRUE, col = "red")
plot_auc_Alph_non_h<- plot(roc(non_h_cv_test$outcome, non_h_cv_test$predicted_Alph), print.auc = TRUE,
col = "green", print.auc.y = .2, add = TRUE)
plot_auc_CADD_h <- plot(roc(h_cv_test$outcome, h_cv_test$CADD_raw), print.auc = TRUE, col = "red", add=FALSE)
plot_auc_Alph_h<- plot(roc(h_cv_test$outcome, h_cv_test$predicted_glm), print.auc = TRUE,
col = "blue", print.auc.y = .2, add = TRUE)
plot_auc_glm_h <- plot(roc(h_cv_test$outcome, h_cv_test$predicted_Alph), print.auc = TRUE,
col = "green", print.auc.y = .4, add = TRUE)
}
}else{
train_dataset<-train_dataset[,colnames_new]
train_dataset<-train_dataset[complete.cases(train_dataset),]
interim_dataset<-variants %>%
filter(clinvar_no_cv21to18_no_gnomad==TRUE)
interim_dataset<-interim_dataset[complete.cases(interim_dataset[,c(colnames_new, "outcome", "CADD_raw")]), ]
gnomad_model_Alph<-fit_model(train_dataset %>% dplyr::select(all_of(colnames_new)))
## OOB error:
#gnomad_model_Alph$prediction.error
train_dataset$predicted_Alph<-predict_model(train_dataset %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph)
roc_rose <- plot(roc(train_dataset$outcome, train_dataset$predicted_Alph), print.auc = TRUE, col = "red")
interim_dataset$predicted_Alph<-predict_model(interim_dataset %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph)
roc_rose <- plot(roc(interim_dataset$outcome, interim_dataset$CADD_raw), print.auc = TRUE, col = "red")
roc_rose <- plot(roc(interim_dataset$outcome, interim_dataset$predicted_Alph), print.auc = TRUE,
col = "green", print.auc.y = .4, add = TRUE)
model_glm <- glm(outcome ~ . , family=binomial(link='logit'),
data=interim_dataset %>% dplyr::select(outcome, predicted_Alph, CADD_raw) %>%
filter(complete.cases(.)))
test_dataset<-variants %>%
filter(cv18_to_21_CV_test==TRUE)
test_dataset<-test_dataset[complete.cases(test_dataset[,c(colnames_new, "outcome")]), ]
test_dataset$predicted_Alph<-predict_model(test_dataset %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph)
test_dataset$predicted_scaled<-scale(test_dataset$predicted_Alph)
test_dataset$predicted_glm<-predict(model_glm, test_dataset)
roc_rose <- plot(roc(test_dataset$outcome, test_dataset$CADD_raw), print.auc = TRUE, col = "red")
roc_rose <- plot(roc(test_dataset$outcome, test_dataset$predicted_glm), print.auc = TRUE,
col = "blue", print.auc.y = .2, add = TRUE)
roc_rose <- plot(roc(test_dataset$outcome, test_dataset$predicted_Alph), print.auc = TRUE,
col = "green", print.auc.y = .4, add = TRUE)
save_tibble <- rbind(save_tibble,
tibble(auc_Alph_train_gnomAD=roc(train_dataset$outcome, train_dataset$predicted_Alph)$auc,
Alph_OOB=ifelse((opt$method_pred=="randomforest"), gnomad_model_Alph$prediction.error, NA),
auc_CADD_interim_CV=roc(interim_dataset$outcome, interim_dataset$CADD_raw)$auc,
auc_Alph_interim_CV=roc(interim_dataset$outcome, interim_dataset$predicted_Alph)$auc,
auc_CADD_test_CV=roc(test_dataset$outcome, test_dataset$CADD_raw)$auc,
auc_Alph_test_CV=roc(test_dataset$outcome, test_dataset$predicted_Alph)$auc,
auc_glm_test_CV=roc(test_dataset$outcome, test_dataset$predicted_glm)$auc,
gnomad_train_nrow=nrow(train_dataset),
interim_nrow=nrow(interim_dataset),
test_nrow=nrow(test_dataset),
condition=opt$prefix,
params=I(list(opt))))
write.csv2(x=save_tibble, file=paste0(opt$prefix, "_results.tsv"))
ggplot(test_dataset)+
geom_point(aes(x=predicted_Alph, y=CADD_raw), alpha=0.3)+
facet_wrap(~outcome)
if (opt$write_dataset){
write_csv(x=test_dataset, file=paste0(opt$prefix,"_test_dataset2.csv.gz"))
}
}
if (opt$method_pred=="randomforest"){
##### CHECK properties of models
var_imp<-tibble(importance=as.vector(gnomad_model_Alph$variable.importance), variable=names(gnomad_model_Alph$variable.importance))
var_importance<-ggplot(var_imp, aes(x=reorder(variable,importance), y=importance,fill=importance))+
geom_bar(stat="identity", position="dodge")+ coord_flip()+
ylab("Variable Importance")+
xlab("")+
ggtitle("Information Value Summary")+
guides(fill=F)+
scale_fill_gradient(low="red", high="blue")
ggsave(filename=paste0(opt$prefix,"_importance.pdf"), plot=var_importance, height=49)
}
if (opt$validation_set != ""){
validation_set<-validation_set%>%
left_join(toAS_properties, by=c("from_AS"="from_AS_toAS"))
validation_set[, colnames(toAS_properties[,names(toAS_properties) != "from_AS_toAS"])]<-
validation_set[, sel_vars_to] -
validation_set[, colnames(toAS_properties[,names(toAS_properties) != "from_AS_toAS"])]
validation_set<-validation_set[complete.cases(validation_set[,c(colnames_new, "outcome", "CADD_raw")]), ]
validation_set$predicted<-predict_model(validation_set %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph)
validation_set$predicted_glm<-predict(model_glm, validation_set)
write_csv(x=validation_set, file=paste0(opt$prefix,"_validation_set.csv.gz"))
}
validation_set<-validation_set%>%
left_join(toAS_properties, by=c("from_AS"="from_AS_toAS"))
validation_set[, colnames(toAS_properties[,names(toAS_properties) != "from_AS_toAS"])]<-
validation_set[, sel_vars_to] -
validation_set[, colnames(toAS_properties[,names(toAS_properties) != "from_AS_toAS"])]
validation_set<-validation_set[complete.cases(validation_set[,c(colnames_new)]), ]
opt$validation_set
getwd()
opt$validation_set
opt$validation_set="../../data/preprocess/validation_set.csv.gzpreprocessed.csv.gz"
validation_set<-read_csv(opt$validation_set)
if (opt$validation_set != ""){
validation_set<-validation_set%>%
left_join(toAS_properties, by=c("from_AS"="from_AS_toAS"))
validation_set[, colnames(toAS_properties[,names(toAS_properties) != "from_AS_toAS"])]<-
validation_set[, sel_vars_to] -
validation_set[, colnames(toAS_properties[,names(toAS_properties) != "from_AS_toAS"])]
validation_set<-validation_set[complete.cases(validation_set[,c(colnames_new)]), ]
validation_set$predicted<-predict_model(validation_set %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph)
validation_set$predicted_glm<-predict(model_glm, validation_set)
write_csv(x=validation_set, file=paste0(opt$prefix,"_validation_set.csv.gz"))
}
validation_set$predicted<-predict_model(validation_set %>% dplyr::select(all_of(colnames_new)), gnomad_model_Alph)
colnames_new
colnames_new == "outcome"
validation_set$predicted<-predict_model(validation_set %>% dplyr::select(all_of(colnames_new[colnames_new!="outcome"])), gnomad_model_Alph)
validation_set$predicted_glm<-predict(model_glm, validation_set)
validation_set$predicted_Alph<-predict_model(validation_set %>% dplyr::select(all_of(colnames_new[colnames_new!="outcome"])), gnomad_model_Alph)
validation_set$predicted_glm<-predict(model_glm, validation_set)
write_csv(x=validation_set, file=paste0(opt$prefix,"_validation_set.csv.gz"))
library(tidyverse)
library(pROC)
test_dataset2<-read_csv("data/prediction/abc_test_dataset2.csv.gz")
validation_dataset<-read_csv("data/prediction/base_model_validation_set.csv.gz")
test_dataset2<-read_csv("data/prediction/base_model_test_dataset2.csv.gz")
setwd("..")
test_dataset2<-read_csv("data/prediction/base_model_test_dataset2.csv.gz")
getwd("..")
getwd()
setwd("..")
test_dataset2<-read_csv("data/prediction/base_model_test_dataset2.csv.gz")
validation_dataset<-read_csv("data/prediction/base_model_validation_set.csv.gz")
for (gene_s in unique(validation_dataset$gene)){
gene_filtered_set<-validation_dataset%>%
filter(gene==gene_s)
cadd_est<-cor.test(gene_filtered_set$Score_exp, gene_filtered_set$CADD_raw, method = "spearman")$estimate
predicted_est<-cor.test(gene_filtered_set$Score_exp, gene_filtered_set$predicted, method = "spearman")$estimate
predicted2_est<-cor.test(gene_filtered_set$Score_exp, gene_filtered_set$predicted2, method = "spearman")$estimate
revel_est<-cor.test(gene_filtered_set$Score_exp, gene_filtered_set$REVEL_score, method = "spearman")$estimate
revel_predicted_est<-cor.test(gene_filtered_set$Score_exp, gene_filtered_set$REVEL_score + gene_filtered_set$predicted, method = "spearman")$estimate
print(paste(cadd_est, predicted_est, predicted2_est, revel_est, revel_predicted_est))
}
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val, temp_inner_loop_values_joined$REVEL_score, method = "spearman")$estimate)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
spearmans_joined
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val, temp_inner_loop_values_joined$predicted_Alph, method = "spearman")$estimate)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
spearmans_joined
spearmans_joined %>% summarise(mean(spearm))
spearmans_joined %>% summarise(mean(abs(spearm)))
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val, temp_inner_loop_values_joined$REVEL_score, method = "spearman")$estimate)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
spearmans_joined %>% summarise(mean(abs(spearm)))
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
validation_dataset$predicted_glmspearmans_joined
tail(spearmans_joined)
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + validation_dataset$REVEL_score
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + validation_dataset$REVEL_score
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
validation_dataset$DEOGEN2_score
validation_dataset$DEOGEN2
validation_dataset$DEOGEN2_rankscore
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH", "DEOGEN2_rankscore")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH", "DEOGEN2_rankscore")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + validation_dataset$REVEL_score
validation_dataset$DEOGEN_plus_ALPH<-validation_dataset$predicted_Alph + validation_dataset$DEOGEN2_rankscore
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH", "DEOGEN2_rankscore")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + validation_dataset$REVEL_score
validation_dataset$DEOGEN_plus_ALPH<-validation_dataset$predicted_Alph + validation_dataset$DEOGEN2_rankscore
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH", "DEOGEN2_rankscore", "DEOGEN_plus_ALPH")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
un_ID
validation_dataset$gene
validation_dataset$DEOGEN2_score
validation_dataset$DEOGEN2_rankscore
score
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate
temp_inner_loop_values_joined$DMS_val
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score))))
unlist(temp_inner_loop_values_joined %>% select(one_of(score)))
temp_inner_loop_values_joined %>% select(one_of(score)
)
temp_inner_loop_values_joined$DEOGEN2_rankscore
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + validation_dataset$REVEL_score
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + 1/2 * validation_dataset$REVEL_score
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + 2*validation_dataset$REVEL_score
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
validation_dataset$REVEL_plus_ALPH<-validation_dataset$predicted_Alph + 0.5*validation_dataset$REVEL_score
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")
validation_dataset$DEOGEN2_score
str_split(validation_dataset$DEOGEN2_score,";")
spearmans_joined<-tibble()
for (un_ID in unique(validation_dataset$Uniprot_acc_split)){
temp_values_joined<-validation_dataset %>% filter(Uniprot_acc_split==un_ID)
for (dms in unique(temp_values_joined$DMS)){
temp_inner_loop_values_joined<-temp_values_joined %>% filter(DMS==dms)
for (score in c("predicted_Alph", "predicted_glm", "CADD_raw", "REVEL_score", "REVEL_plus_ALPH")){
spearmans<-tibble(
gene=unique(temp_inner_loop_values_joined$gene_dms),
UP_ID=un_ID,
DMS=dms,
spearm=cor.test(temp_inner_loop_values_joined$DMS_val,
as.vector(unlist(temp_inner_loop_values_joined %>% select(one_of(score)))) , method = "spearman")$estimate,
method=score)
spearmans_joined=rbind(spearmans_joined,spearmans)
}
}
}
spearmans_joined %>%
group_by(method) %>%
summarise(mean(abs(spearm)))
spearmans_joined
spearmans_joined%>% spread(method, spearm)
spearmans_joined_spread<-spearmans_joined%>% spread(method, spearm)
View(spearmans_joined_spread)
