files <- list.files(path="/media/axel/TOSHIBA EXT/merged_dbnsfp/", pattern="*.csv.gz", full.names=TRUE, recursive=FALSE)
files <- list.files(path="/media/axel/Dateien/Arbeit_Gen/alphafold2/extract_features_alphafold/data", pattern="*.csv.gz", full.names=TRUE, recursive=FALSE)
for (x_file in files){
file.info(x_file)$size
}
print(file.info(x_file)$size)
for (x_file in files){
print(file.info(x_file)$size)
}
for (x_files in 1:len(files)){
file.info(files[i])$size
}
for (x_files in 1:length(files)){
file.info(files[i])$size
}
for (x_files in 1:length(files)){
file.info(files[x_files])$size
}
print(file.info(files[x_files])$size)
for (x_files in 1:length(files)){
print(file.info(files[x_files])$size)
}
files <- list.files(path="/media/axel/Dateien/Arbeit_Gen/alphafold2/extract_features_alphafold/data", pattern="*.csv.gz", full.names=TRUE, recursive=FALSE)
for (x_files in 1:length(files)){
if (file.info(files[x_files])$size < 1000){
files[x_files]<-NA
}
}
files
if (file.info(files[x_files])$size < 20000){
files[x_files]<-NA
}
files
if (file.info(files[x_files])$size < 2000000){
files[x_files]<-NA
}
for (x_files in 1:length(files)){
if (file.info(files[x_files])$size < 2000000){
files[x_files]<-NA
}
}
files
if (file.info(files[x_files])$size < 200000000){
files[x_files]<-NA
}
files <- list.files(path="/media/axel/Dateien/Arbeit_Gen/alphafold2/extract_features_alphafold/data", pattern="*.csv.gz", full.names=TRUE, recursive=FALSE)
for (x_files in 1:length(files)){
if (file.info(files[x_files])$size < 200000000){
files[x_files]<-NA
}
}
files
files<-files[!is.na(files)]
files <- list.files(path="/media/axel/Dateien/Arbeit_Gen/alphafold2/extract_features_alphafold/data", pattern="*.csv.gz", full.names=TRUE, recursive=FALSE)
for (x_files in 1:length(files)){
if (file.info(files[x_files])$size < 1000){
files[x_files]<-NA
}
}
files<-files[!is.na(files)]
colnames_take<-scan("/media/axel/Dateien/Arbeit_Gen/alphafold2/extract_features_alphafold/colnames.txt", what="", sep="\n")
values_joined<-lapply(files, function(x) { #  mc.cores = 1,
training_data<-fread(x, na.strings = c("NA","."))[!is.na(num_interact), ..colnames_take]
singletons <- training_data[((gnomAD_genomes_AC<2 & gnomAD_exomes_AC==1 & gnomAD_exomes_NFE_AC==1) & (is.na(`1000Gp3_AC`) | `1000Gp3_AC`==0)  & (is.na(ESP6500_AA_AC) | ESP6500_AA_AC==0) & (is.na(ESP6500_EA_AC) | ESP6500_AA_AC==0))]
frequents<- training_data[gnomAD_exomes_AF>0.001 | gnomAD_genomes_AF> 0.001]
clinvars<- training_data[clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic","Benign", "Likely_benign")]
return(rbindlist(list(singletons[,`:=`(outcome=1, gnomadSet=1)],
frequents[,`:=` (outcome=0, gnomadSet=1)],
clinvars[,`:=` (outcome=ifelse(clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic"),1,0), gnomadSet=0)]),
fill=TRUE, use.names=TRUE))
})
library(data.table)
values_joined<-lapply(files, function(x) { #  mc.cores = 1,
training_data<-fread(x, na.strings = c("NA","."))[!is.na(num_interact), ..colnames_take]
singletons <- training_data[((gnomAD_genomes_AC<2 & gnomAD_exomes_AC==1 & gnomAD_exomes_NFE_AC==1) & (is.na(`1000Gp3_AC`) | `1000Gp3_AC`==0)  & (is.na(ESP6500_AA_AC) | ESP6500_AA_AC==0) & (is.na(ESP6500_EA_AC) | ESP6500_AA_AC==0))]
frequents<- training_data[gnomAD_exomes_AF>0.001 | gnomAD_genomes_AF> 0.001]
clinvars<- training_data[clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic","Benign", "Likely_benign")]
return(rbindlist(list(singletons[,`:=`(outcome=1, gnomadSet=1)],
frequents[,`:=` (outcome=0, gnomadSet=1)],
clinvars[,`:=` (outcome=ifelse(clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic"),1,0), gnomadSet=0)]),
fill=TRUE, use.names=TRUE))
})
values_joined<-lapply(files, function(x) { #  mc.cores = 1,
training_data<-fread(x, na.strings = c("NA",".")) # [!is.na(num_interact), ..colnames_take]
singletons <- training_data[((gnomAD_genomes_AC<2 & gnomAD_exomes_AC==1 & gnomAD_exomes_NFE_AC==1) & (is.na(`1000Gp3_AC`) | `1000Gp3_AC`==0)  & (is.na(ESP6500_AA_AC) | ESP6500_AA_AC==0) & (is.na(ESP6500_EA_AC) | ESP6500_AA_AC==0))]
frequents<- training_data[gnomAD_exomes_AF>0.001 | gnomAD_genomes_AF> 0.001]
clinvars<- training_data[clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic","Benign", "Likely_benign")]
return(rbindlist(list(singletons[,`:=`(outcome=1, gnomadSet=1)],
frequents[,`:=` (outcome=0, gnomadSet=1)],
clinvars[,`:=` (outcome=ifelse(clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic"),1,0), gnomadSet=0)]),
fill=TRUE, use.names=TRUE))
})
values_joined
View(values_joined)
values_joined<-rbindlist(values_joined)
View(values_joined)
files
colnames_take<-scan("/media/axel/Dateien/Arbeit_Gen/alphafold2/extract_features_alphafold/colnames.txt", what="", sep="\n")
values_joined<-lapply(files, function(x) { #  mc.cores = 1,
training_data<-fread(x, na.strings = c("NA","."))[!is.na(any_interaction_CADD_raw_surr), ..colnames_take]
singletons <- training_data[((gnomAD_genomes_AC<2 & gnomAD_exomes_AC==1 & gnomAD_exomes_NFE_AC==1) & (is.na(`1000Gp3_AC`) | `1000Gp3_AC`==0)  & (is.na(ESP6500_AA_AC) | ESP6500_AA_AC==0) & (is.na(ESP6500_EA_AC) | ESP6500_AA_AC==0))]
frequents<- training_data[gnomAD_exomes_AF>0.001 | gnomAD_genomes_AF> 0.001]
clinvars<- training_data[clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic","Benign", "Likely_benign")]
return(rbindlist(list(singletons[,`:=`(outcome=1, gnomadSet=1)],
frequents[,`:=` (outcome=0, gnomadSet=1)],
clinvars[,`:=` (outcome=ifelse(clinvar_clnsig %in% c("Likely_pathogenic","Pathogenic"),1,0), gnomadSet=0)]),
fill=TRUE, use.names=TRUE))
})
values_joined<-rbindlist(values_joined)
